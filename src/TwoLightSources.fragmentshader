#version 330
// input data

uniform vec3 EyePosition_worldspace;
varying vec3 position_worldspace;
varying vec3 normal_worldspace;
varying vec2 TexCoord;

//point light

uniform vec3 LightPosition_worldspace;
uniform vec3 ambientPointLight;
uniform vec3 diffusePointLight;
uniform vec3 specularPointLight;

//spot light
uniform vec3 SpotLightPosition_worldspace;
uniform vec3 SpotLightDirection;
uniform vec3 diffuseSpotLight;
uniform vec3 specularSpotLight;

uniform float cutoff;

uniform sampler2D myTextureSampler;


vec3 CalculatePointLight();
vec3 CalculateSpotLight();

void main()
{
	vec4 textureColor = texture2D( myTextureSampler, TexCoord );
	vec3 lightingColor = CalculatePointLight();
	vec3 spotlight =CalculateSpotLight();
	vec3 finalcolor=0.5*(lightingColor+spotlight);
	
	gl_FragColor = textureColor*vec4(finalcolor,1);
}

vec3 CalculatePointLight()
{
	vec3 lightVector = normalize(LightPosition_worldspace - position_worldspace);
	float brightness = dot(lightVector,normal_worldspace);
	brightness = clamp(brightness,0,1);
	vec3 diffuseLight = vec3(brightness,brightness,brightness);

	//Specular light calculations.
	vec3 reflectedLightVector = reflect(-lightVector,normal_worldspace);
	vec3 eyeDirectionVector = normalize(EyePosition_worldspace - position_worldspace);

	float specularity = dot(reflectedLightVector,eyeDirectionVector);
	specularity = clamp(specularity,0,1);
	float specularExponent = 50;
	specularity = pow(specularity,specularExponent);
	vec3 specularLight = vec3(specularity,specularity,specularity);

	vec3 lightColor = ambientPointLight + diffuseLight*diffusePointLight+specularLight*specularPointLight;
		return lightColor;
}


vec3 CalculateSpotLight()
{
vec3 color;
vec3 lightDir = normalize( SpotLightPosition_worldspace- position_worldspace);
float theta = dot(lightDir, normalize(-SpotLightDirection));
theta = clamp(theta,0,1);

	if(theta > cutoff) 
{ 

	// Diffuse light calculations.
	
	vec3 lightVector = normalize(SpotLightPosition_worldspace - position_worldspace);
	float brightness = dot(lightVector,normal_worldspace);
	brightness = clamp(brightness,0,1);
	vec3 diffuse = vec3(brightness,brightness,brightness);

	//Specular light calculations.
	vec3 reflectedLightVector = reflect(-lightVector,normal_worldspace);
	vec3 eyeDirectionVector = normalize(EyePosition_worldspace - position_worldspace);

	float specularity = dot(reflectedLightVector,eyeDirectionVector);
	specularity = clamp(specularity,0,1);
	float specularExponent = 50;
	specularity = pow(specularity,specularExponent);
	vec3 specular = vec3(specularity,specularity,specularity);
  
    color = diffuse*diffuseSpotLight + specular*specularSpotLight;
}
else  
  color= vec3(0.0f,0.0f,0.0f);

  return color;
}